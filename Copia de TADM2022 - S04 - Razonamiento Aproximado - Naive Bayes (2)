{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1uCzrc1rr7QKMr3BhYL796p_32jwDpad-","timestamp":1669747823501},{"file_id":"1SQUw7aOqSdro2Oa4pwh9Q4G5Fz9-9mKN","timestamp":1668151182216}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","source":["Estudiante: Raquel Mendoza Guillén"],"metadata":{"id":"z4VOtzkw_Wn3"}},{"cell_type":"markdown","metadata":{"id":"t1s4a8JyqcyP"},"source":["Igual que en el otro cuaderno sobre razonamiento aproximado, aquí vamos a operar de diferentes maneras con los préstamos de nuestro banco. En concreto, vamos a intentar crear clasificadores para que, dadas unas variables, nos den la probabilidad o el rating de darle un préstamo a un cliente."]},{"cell_type":"markdown","metadata":{"id":"vpDTzqbaiodK"},"source":["## Carga de Datos\n","\n","Cargamos los datos que necesitamos para trabajar:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lrljckjEtOOm","executionInfo":{"status":"ok","timestamp":1669802809645,"user_tz":-60,"elapsed":4891,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"a60543da-4f7e-4ef9-cac1-0e6429564a00"},"source":["!gdown --id 1Osmr7qVN0NMuqYxvLesNn7H4nqPCVbsU"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n","  category=FutureWarning,\n","Downloading...\n","From: https://drive.google.com/uc?id=1Osmr7qVN0NMuqYxvLesNn7H4nqPCVbsU\n","To: /content/data_berka.db\n","100% 70.2M/70.2M [00:00<00:00, 91.9MB/s]\n"]}]},{"cell_type":"markdown","metadata":{"id":"UDaOStdPirkZ"},"source":["1. Cargamos la extensión sql"]},{"cell_type":"code","metadata":{"id":"3Zpf7lz5h7wp"},"source":["%load_ext sql"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zPGw5HdqiuHI"},"source":["2. Nos conectamos con la base de datos"]},{"cell_type":"code","metadata":{"id":"ADklBjhhiPLE","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1669802811296,"user_tz":-60,"elapsed":17,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"b619ab22-ad5f-4a1a-8708-df3a7935a1ac"},"source":["%sql sqlite:///data_berka.db"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Connected: @data_berka.db'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"oQlROt7Uidms"},"source":["> Datos de préstamos ya finalizados con su estado final, incluyendo datos del distrito, etc."]},{"cell_type":"markdown","source":["¿Cuántos préstamos hay por cada estado (status)?"],"metadata":{"id":"iq0ZnTlWlN1s"}},{"cell_type":"code","source":["%%sql\n","SELECT status, count(*) as total\n","FROM loan\n","GROUP BY status\n","ORDER BY total DESC \n","\n"],"metadata":{"id":"75QG92jrlNcH","colab":{"base_uri":"https://localhost:8080/","height":160},"executionInfo":{"status":"ok","timestamp":1669802811548,"user_tz":-60,"elapsed":263,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"ecbbdb33-eec6-493f-f62f-0f33860f19af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * sqlite:///data_berka.db\n","Done.\n"]},{"output_type":"execute_result","data":{"text/plain":["[('C', 403), ('A', 203), ('D', 45), ('B', 31)]"],"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>status</th>\n","            <th>total</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>C</td>\n","            <td>403</td>\n","        </tr>\n","        <tr>\n","            <td>A</td>\n","            <td>203</td>\n","        </tr>\n","        <tr>\n","            <td>D</td>\n","            <td>45</td>\n","        </tr>\n","        <tr>\n","            <td>B</td>\n","            <td>31</td>\n","        </tr>\n","    </tbody>\n","</table>"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["Con DESC le pedimos que lo ordene de mayor a menor."],"metadata":{"id":"QdTLDm4_AT68"}},{"cell_type":"markdown","source":["Vamos a empezar obteniendo los datos de los préstamos ya finalizados. Van a ser nuestros datos de entrenamiento, por lo que seleccionaremos únicamente aquellos préstamos en status 'A' o 'B'. \n","\n","Con una sentencia CASE vamos a poner los préstamos finalizados bien a 1 y los que no finalizaron bien a 0. \n","\n","Sintaxis de uso de [INNER JOIN](https://www.sqlitetutorial.net/sqlite-inner-join/) para establecer joins entre tablas"],"metadata":{"id":"roYYO_h9kH0d"}},{"cell_type":"code","metadata":{"id":"dbTj5fJxiasa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669802811550,"user_tz":-60,"elapsed":23,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"819bba8b-cbc4-4446-ee90-ed3d1ad088c9"},"source":["%%sql loans_train << SELECT substr(l.date,0,3) year, amount, duration, payments, A11, A13,\n","  CASE status WHEN 'A' THEN 1\n","              WHEN 'B' THEN 0\n","  END label\n","  FROM LOAN l, ACCOUNT a INNER JOIN DISTRICT d on a.district_id = d.A1 \n","  WHERE l.account_id = a.account_id and l.status in (\"A\", \"B\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * sqlite:///data_berka.db\n","Done.\n","Returning data to local variable loans_train\n"]}]},{"cell_type":"markdown","metadata":{"id":"Jj_-Qp_yiyeB"},"source":["3. Obtenemos el DataFrame"]},{"cell_type":"code","metadata":{"id":"EgN-fsjUimKL","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1669802811550,"user_tz":-60,"elapsed":18,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"cb94b974-54c6-44c5-e866-8ad5b722a432"},"source":["df_train = loans_train.DataFrame()\n","df_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  year  amount  duration  payments    A11   A13  label\n","0   93   96396        12      8033   9650  3.67      0\n","1   93  165960        36      4610   8369  2.31      1\n","2   93  127080        60      2118   8390  2.89      1\n","3   93  105804        36      2939   8754  4.31      1\n","4   93  274740        60      4579  12541  0.43      1"],"text/html":["\n","  <div id=\"df-d24f676c-db65-45fa-85c0-3b5a15f0b0d7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>amount</th>\n","      <th>duration</th>\n","      <th>payments</th>\n","      <th>A11</th>\n","      <th>A13</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>93</td>\n","      <td>96396</td>\n","      <td>12</td>\n","      <td>8033</td>\n","      <td>9650</td>\n","      <td>3.67</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>93</td>\n","      <td>165960</td>\n","      <td>36</td>\n","      <td>4610</td>\n","      <td>8369</td>\n","      <td>2.31</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>93</td>\n","      <td>127080</td>\n","      <td>60</td>\n","      <td>2118</td>\n","      <td>8390</td>\n","      <td>2.89</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>93</td>\n","      <td>105804</td>\n","      <td>36</td>\n","      <td>2939</td>\n","      <td>8754</td>\n","      <td>4.31</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>93</td>\n","      <td>274740</td>\n","      <td>60</td>\n","      <td>4579</td>\n","      <td>12541</td>\n","      <td>0.43</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d24f676c-db65-45fa-85c0-3b5a15f0b0d7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d24f676c-db65-45fa-85c0-3b5a15f0b0d7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d24f676c-db65-45fa-85c0-3b5a15f0b0d7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"75rgtscNqQ3T","executionInfo":{"status":"ok","timestamp":1669802811853,"user_tz":-60,"elapsed":318,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"74ec13aa-1c13-4542-9ba2-161b3750aada"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(234, 7)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["El código de shape nos ayuda a ver cuántas filas y columnas tiene nuestro data frame."],"metadata":{"id":"N5sUJn3WA8Pk"}},{"cell_type":"code","source":[],"metadata":{"id":"yar-8u8ZHKm_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Para la parte de *test* lo que vamos a extraer de la Base de Datos son los préstamos que están en ejecución (`status in (\"C\", \"D\")`) con los mismos campos que en la consulta anterior."],"metadata":{"id":"jhv5wpixG5bL"}},{"cell_type":"code","source":["%%sql loans_test << SELECT substr(l.date,0,3) year, amount, duration, payments, A11, A13,\n","  CASE status WHEN 'C' THEN 1\n","              WHEN 'D' THEN 0\n","  END label\n","  FROM LOAN l, ACCOUNT a INNER JOIN DISTRICT d on a.district_id = d.A1 \n","  WHERE l.account_id = a.account_id and l.status in (\"C\", \"D\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i65WhpR4k9fk","executionInfo":{"status":"ok","timestamp":1669802811857,"user_tz":-60,"elapsed":24,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"485456d2-75b8-444b-ff26-5e350d676be3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * sqlite:///data_berka.db\n","Done.\n","Returning data to local variable loans_test\n"]}]},{"cell_type":"markdown","source":["**Ejercicio**: Añadir la edad del cliente propietario de la cuenta del préstamo y algún campo de datos demográficos adicionales.\n"],"metadata":{"id":"6qRaWxnkcLC3"}},{"cell_type":"code","source":["%%sql loans_test << SELECT substr(l.date,0,3) year, amount, duration, payments, A11, A13,\n","  CASE status WHEN 'C' THEN 1\n","              WHEN 'D' THEN 0\n","  END label\n","  FROM LOAN l, ACCOUNT a INNER JOIN DISTRICT d on a.district_id = d.A1 \n","  WHERE l.account_id = a.account_id and l.status in (\"C\", \"D\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1aK_meS7Bt4a","executionInfo":{"status":"ok","timestamp":1669802811858,"user_tz":-60,"elapsed":18,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"8d11aad4-8e4c-40ee-db19-87796bbacf91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * sqlite:///data_berka.db\n","Done.\n","Returning data to local variable loans_test\n"]}]},{"cell_type":"code","source":["df_test = loans_test.DataFrame()\n","df_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"dpwgRcLZlJvp","executionInfo":{"status":"ok","timestamp":1669802811859,"user_tz":-60,"elapsed":16,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"bf1a2a57-1da7-47ad-e7f4-97368478bf18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  year  amount  duration  payments   A11   A13  label\n","0   94  253200        60      4220  9893  4.72      1\n","1   94  300660        60      5011  9317  7.07      1\n","2   94  167100        60      2785  8544  1.86      1\n","3   94  149340        60      2489  8254  3.76      1\n","4   94   89040        60      1484  8909  5.56      1"],"text/html":["\n","  <div id=\"df-55eec5a9-3dc3-4643-9259-6a74040f05e5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>amount</th>\n","      <th>duration</th>\n","      <th>payments</th>\n","      <th>A11</th>\n","      <th>A13</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>94</td>\n","      <td>253200</td>\n","      <td>60</td>\n","      <td>4220</td>\n","      <td>9893</td>\n","      <td>4.72</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>94</td>\n","      <td>300660</td>\n","      <td>60</td>\n","      <td>5011</td>\n","      <td>9317</td>\n","      <td>7.07</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>94</td>\n","      <td>167100</td>\n","      <td>60</td>\n","      <td>2785</td>\n","      <td>8544</td>\n","      <td>1.86</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>94</td>\n","      <td>149340</td>\n","      <td>60</td>\n","      <td>2489</td>\n","      <td>8254</td>\n","      <td>3.76</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>94</td>\n","      <td>89040</td>\n","      <td>60</td>\n","      <td>1484</td>\n","      <td>8909</td>\n","      <td>5.56</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55eec5a9-3dc3-4643-9259-6a74040f05e5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-55eec5a9-3dc3-4643-9259-6a74040f05e5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-55eec5a9-3dc3-4643-9259-6a74040f05e5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"AcgHrYibsQn3"},"source":["4. División de los datos en entrenamiento y test"]},{"cell_type":"markdown","source":["`features` es una variable de tipo lista que me almacena los nombres de las características que me sirven como **entrada**"],"metadata":{"id":"8WpAeR8WIUm1"}},{"cell_type":"code","source":["features = [\"year\", \"amount\", \"duration\", \"payments\",\"A11\", \"A13\"]"],"metadata":{"id":"mH1b4h27kA85"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["* train (creación del modelo) : datos de préstamos ya finalizados\n","* test (evaluación del modelo): datos de préstamos en ejecución"],"metadata":{"id":"Gyt-TgZ3IXEi"}},{"cell_type":"code","metadata":{"id":"iRV2W22-sTKg"},"source":["X_train = df_train[features]\n","y_train = df_train[\"label\"]\n","\n","X_test = df_test[features]\n","y_test = df_test[\"label\"]\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["5. Normalizarlos puede ser una buena medida para obtener mejores resultados.\n","Para ello vamos a utilizar el [StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)\n","\n","El centrado y el escalado se realizan de forma independiente en cada característica, calculando las estadísticas pertinentes en las muestras del **conjunto de entrenamiento**. La media y la desviación estándar se almacenan para utilizarlas en datos posteriores mediante una **transformación**.\n","\n","Mas información sobre normalización en el siguiente [enlace](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler)\n"],"metadata":{"id":"TWn1Xr-Cqas7"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","# calculo de los factores de centrado y escalado\n","scaler.fit(X_train) \n","# transformación\n","X_train = scaler.transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"BaaMrekmpKH3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Aplicamos un modelo [NaiveBayes](https://scikit-learn.org/stable/modules/naive_bayes.html?highlight=naive+bayes) para construir un clasificador de préstamos"],"metadata":{"id":"Uf-IVArsl8qM"}},{"cell_type":"code","source":["from sklearn.naive_bayes import GaussianNB #, MultinomialNB, BernoulliNB, ComplementNB\n","\n","gnb = GaussianNB()\n","clf = gnb.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n","print(\"Número de préstamos clasificados erroneamente %d de un total de  %d\"  % (X_test.shape[0], (y_test != y_pred).sum()))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZHrLj9inBOv","executionInfo":{"status":"ok","timestamp":1669802814131,"user_tz":-60,"elapsed":5,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"7ca29ded-3e00-416d-b8b9-2e7def860c89"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Número de préstamos clasificados erroneamente 448 de un total de  123\n"]}]},{"cell_type":"markdown","source":["Para ver qué resultados tenemos sobre la colección de `test`, utilizamos en primer lugar el informe de los resultados [`classification report`](https://scikit-learn.org/stable/modules/model_evaluation.html#classification-report)"],"metadata":{"id":"sSXcCuddmOFV"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred, labels=clf.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f9BITuBznBAC","executionInfo":{"status":"ok","timestamp":1669802814530,"user_tz":-60,"elapsed":402,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"c674a11f-8289-4eb6-cd22-c499a83edf11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.20      0.60      0.31        45\n","           1       0.94      0.74      0.83       403\n","\n","    accuracy                           0.73       448\n","   macro avg       0.57      0.67      0.57       448\n","weighted avg       0.87      0.73      0.78       448\n","\n"]}]},{"cell_type":"markdown","source":["Y la [matriz de confusión](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html)"],"metadata":{"id":"rosWtD4MnPAw"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","cm = confusion_matrix(y_test, y_pred, labels= clf.classes_)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\n","disp.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"qSZzOldtoOku","executionInfo":{"status":"ok","timestamp":1669802815364,"user_tz":-60,"elapsed":838,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"0fe5ef7f-00b0-4c37-e7fc-c6c5e1830151"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fe847745250>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**DUDA**: ¿qué es, exactamente, la matriz de confusión? ¿Se utiliza para comprobar más visualmente los porcentajes de acierto y de error de nuestro conjunto de datos de entrenamiento al compararlo con el de verificación?"],"metadata":{"id":"-UEqNlf7DKxH"}},{"cell_type":"markdown","source":["**Ejercicios**\n","\n","Plantear el clasificador de préstamos añadiendo datos de otras tablas de la base de datos, u otros campos de las mismas tablas (edad del cliente, etc).\n","\n","Otras transformaciones: [Discretización](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-discretization) y utilización de otros clasificadores NB"],"metadata":{"id":"rPkodIffcBxb"}},{"cell_type":"markdown","source":["Antes de plantear el nuevo clasificador de préstamos, hacemos un inner join con la tabla *PERMANENT ORDER*."],"metadata":{"id":"bE60hslRDuc4"}},{"cell_type":"markdown","source":[],"metadata":{"id":"II9b8XTdEDXs"}},{"cell_type":"code","source":["%%sql loans_train << SELECT substr(l.date,0,3) year, amount, duration, payments, A11, A13,\n","  CASE status WHEN 'A' THEN 1\n","              WHEN 'B' THEN 0\n","  END label\n","  FROM LOAN l, ACCOUNT a INNER JOIN PERMANENT ORDER a on a.order_id \n","  WHERE l.account_id = a.account_id and l.status in (\"A\", \"B\") "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eP9-ILjsAvot","executionInfo":{"status":"ok","timestamp":1669804915090,"user_tz":-60,"elapsed":447,"user":{"displayName":"Raquel Noresp","userId":"00248358017564933653"}},"outputId":"dc845763-31ab-4c0c-8d95-f25629ee4bf5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" * sqlite:///data_berka.db\n","(sqlite3.OperationalError) near \"a\": syntax error\n","[SQL: SELECT substr(l.date,0,3) year, amount, duration, payments, A11, A13, CASE status WHEN 'A' THEN 1 WHEN 'B' THEN 0 END label FROM LOAN l, ACCOUNT a INNER JOIN PERMANENT ORDER a on a.order_id WHERE l.account_id = a.account_id and l.status in (\"A\", \"B\")]\n","(Background on this error at: https://sqlalche.me/e/14/e3q8)\n"]}]},{"cell_type":"markdown","source":["Me sale un error de sintaxis, pero no encuentro cuál es exactamente y no puedo continuar con el ejercicio."],"metadata":{"id":"p87cA7yxFV4t"}},{"cell_type":"markdown","source":["En este cuaderno, me ocurre como con el siguiente. El día que se explicaron no pude asistir a clase, con lo cual me han surgido bastantes dudas mientras los estaba tratando de hacer (por ejemplo, lo de la matriz de confusión que he apuntado antes o cuál es la finalidad de las letras minúsculas que aparecen en el código del *inner join*). Reharé el cuaderno con más calma a ver si lo comprendo mejor."],"metadata":{"id":"ws6OSs-5I25W"}}]}